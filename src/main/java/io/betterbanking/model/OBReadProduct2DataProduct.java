/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * OpenAPI spec version: v3.1.6
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.betterbanking.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.Objects;

/**
 * Product details associated with the Account
 */
@Schema(description = "Product details associated with the Account")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-29T19:03:17.493Z[GMT]")
public class OBReadProduct2DataProduct {
    @SerializedName("ProductName")
    private String productName = null;

    @SerializedName("ProductId")
    private String productId = null;

    @SerializedName("AccountId")
    private String accountId = null;

    @SerializedName("SecondaryProductId")
    private String secondaryProductId = null;
    @SerializedName("ProductType")
    private ProductTypeEnum productType = null;
    @SerializedName("MarketingStateId")
    private String marketingStateId = null;
    @SerializedName("OtherProductType")
    private OBReadProduct2DataOtherProductType otherProductType = null;
    @SerializedName("BCA")
    private OBBCAData1 BCA = null;
    @SerializedName("PCA")
    private OBPCAData1 PCA = null;

    public OBReadProduct2DataProduct productName(String productName) {
        this.productName = productName;
        return this;
    }

    /**
     * The name of the Product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
     *
     * @return productName
     **/
    @Schema(description = "The name of the Product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.")
    public String getProductName() {
        return productName;
    }

    public void setProductName(String productName) {
        this.productName = productName;
    }

    public OBReadProduct2DataProduct productId(String productId) {
        this.productId = productId;
        return this;
    }

    /**
     * The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.
     *
     * @return productId
     **/
    @Schema(description = "The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.")
    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public OBReadProduct2DataProduct accountId(String accountId) {
        this.accountId = accountId;
        return this;
    }

    /**
     * Get accountId
     *
     * @return accountId
     **/
    @Schema(required = true, description = "")
    public String getAccountId() {
        return accountId;
    }

    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    public OBReadProduct2DataProduct secondaryProductId(String secondaryProductId) {
        this.secondaryProductId = secondaryProductId;
        return this;
    }

    /**
     * Any secondary Identification which  supports Product Identifier to uniquely identify the current account banking products.
     *
     * @return secondaryProductId
     **/
    @Schema(description = "Any secondary Identification which  supports Product Identifier to uniquely identify the current account banking products.")
    public String getSecondaryProductId() {
        return secondaryProductId;
    }

    public void setSecondaryProductId(String secondaryProductId) {
        this.secondaryProductId = secondaryProductId;
    }

    public OBReadProduct2DataProduct productType(ProductTypeEnum productType) {
        this.productType = productType;
        return this;
    }

    /**
     * Product type : Personal Current Account, Business Current Account
     *
     * @return productType
     **/
    @Schema(required = true, description = "Product type : Personal Current Account, Business Current Account")
    public ProductTypeEnum getProductType() {
        return productType;
    }

    public void setProductType(ProductTypeEnum productType) {
        this.productType = productType;
    }

    public OBReadProduct2DataProduct marketingStateId(String marketingStateId) {
        this.marketingStateId = marketingStateId;
        return this;
    }

    /**
     * Unique and unambiguous identification of a  Product Marketing State.
     *
     * @return marketingStateId
     **/
    @Schema(description = "Unique and unambiguous identification of a  Product Marketing State.")
    public String getMarketingStateId() {
        return marketingStateId;
    }

    public void setMarketingStateId(String marketingStateId) {
        this.marketingStateId = marketingStateId;
    }

    public OBReadProduct2DataProduct otherProductType(OBReadProduct2DataOtherProductType otherProductType) {
        this.otherProductType = otherProductType;
        return this;
    }

    /**
     * Get otherProductType
     *
     * @return otherProductType
     **/
    @Schema(description = "")
    public OBReadProduct2DataOtherProductType getOtherProductType() {
        return otherProductType;
    }

    public void setOtherProductType(OBReadProduct2DataOtherProductType otherProductType) {
        this.otherProductType = otherProductType;
    }

    public OBReadProduct2DataProduct BCA(OBBCAData1 BCA) {
        this.BCA = BCA;
        return this;
    }

    /**
     * Get BCA
     *
     * @return BCA
     **/
    @Schema(description = "")
    public OBBCAData1 getBCA() {
        return BCA;
    }

    public void setBCA(OBBCAData1 BCA) {
        this.BCA = BCA;
    }

    public OBReadProduct2DataProduct PCA(OBPCAData1 PCA) {
        this.PCA = PCA;
        return this;
    }

    /**
     * Get PCA
     *
     * @return PCA
     **/
    @Schema(description = "")
    public OBPCAData1 getPCA() {
        return PCA;
    }

    public void setPCA(OBPCAData1 PCA) {
        this.PCA = PCA;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OBReadProduct2DataProduct obReadProduct2DataProduct = (OBReadProduct2DataProduct) o;
        return Objects.equals(this.productName, obReadProduct2DataProduct.productName) &&
                Objects.equals(this.productId, obReadProduct2DataProduct.productId) &&
                Objects.equals(this.accountId, obReadProduct2DataProduct.accountId) &&
                Objects.equals(this.secondaryProductId, obReadProduct2DataProduct.secondaryProductId) &&
                Objects.equals(this.productType, obReadProduct2DataProduct.productType) &&
                Objects.equals(this.marketingStateId, obReadProduct2DataProduct.marketingStateId) &&
                Objects.equals(this.otherProductType, obReadProduct2DataProduct.otherProductType) &&
                Objects.equals(this.BCA, obReadProduct2DataProduct.BCA) &&
                Objects.equals(this.PCA, obReadProduct2DataProduct.PCA);
    }

    @Override
    public int hashCode() {
        return Objects.hash(productName, productId, accountId, secondaryProductId, productType, marketingStateId, otherProductType, BCA, PCA);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OBReadProduct2DataProduct {\n");

        sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
        sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
        sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
        sb.append("    secondaryProductId: ").append(toIndentedString(secondaryProductId)).append("\n");
        sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
        sb.append("    marketingStateId: ").append(toIndentedString(marketingStateId)).append("\n");
        sb.append("    otherProductType: ").append(toIndentedString(otherProductType)).append("\n");
        sb.append("    BCA: ").append(toIndentedString(BCA)).append("\n");
        sb.append("    PCA: ").append(toIndentedString(PCA)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Product type : Personal Current Account, Business Current Account
     */
    @JsonAdapter(ProductTypeEnum.Adapter.class)
    public enum ProductTypeEnum {
        BUSINESSCURRENTACCOUNT("BusinessCurrentAccount"),
        COMMERCIALCREDITCARD("CommercialCreditCard"),
        OTHER("Other"),
        PERSONALCURRENTACCOUNT("PersonalCurrentAccount"),
        SMELOAN("SMELoan");

        private String value;

        ProductTypeEnum(String value) {
            this.value = value;
        }

        public static ProductTypeEnum fromValue(String text) {
            for (ProductTypeEnum b : ProductTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<ProductTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ProductTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ProductTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ProductTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }

}
