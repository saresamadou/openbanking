/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * OpenAPI spec version: v3.1.6
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.betterbanking.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Provides overdraft details for a specific tier or band
 */
@Schema(description = "Provides overdraft details for a specific tier or band")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-29T19:03:17.493Z[GMT]")
public class OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand {
    @SerializedName("Identification")
    private String identification = null;

    @SerializedName("TierValueMin")
    private String tierValueMin = null;

    @SerializedName("TierValueMax")
    private String tierValueMax = null;

    @SerializedName("EAR")
    private String EAR = null;

    @SerializedName("AgreementLengthMin")
    private Integer agreementLengthMin = null;

    @SerializedName("AgreementLengthMax")
    private Integer agreementLengthMax = null;
    @SerializedName("AgreementPeriod")
    private AgreementPeriodEnum agreementPeriod = null;
    @SerializedName("OverdraftInterestChargingCoverage")
    private OverdraftInterestChargingCoverageEnum overdraftInterestChargingCoverage = null;
    @SerializedName("BankGuaranteedIndicator")
    private Boolean bankGuaranteedIndicator = null;
    @SerializedName("Notes")
    private List<String> notes = null;
    @SerializedName("OverdraftFeesCharges")
    private List<OBReadProduct2DataOtherProductTypeOverdraftOverdraftFeesCharges> overdraftFeesCharges = null;

    public OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand identification(String identification) {
        this.identification = identification;
        return this;
    }

    /**
     * Unique and unambiguous identification of a  Tier Band for a overdraft.
     *
     * @return identification
     **/
    @Schema(description = "Unique and unambiguous identification of a  Tier Band for a overdraft.")
    public String getIdentification() {
        return identification;
    }

    public void setIdentification(String identification) {
        this.identification = identification;
    }

    public OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand tierValueMin(String tierValueMin) {
        this.tierValueMin = tierValueMin;
        return this;
    }

    /**
     * Minimum value of Overdraft Tier/Band
     *
     * @return tierValueMin
     **/
    @Schema(required = true, description = "Minimum value of Overdraft Tier/Band")
    public String getTierValueMin() {
        return tierValueMin;
    }

    public void setTierValueMin(String tierValueMin) {
        this.tierValueMin = tierValueMin;
    }

    public OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand tierValueMax(String tierValueMax) {
        this.tierValueMax = tierValueMax;
        return this;
    }

    /**
     * Maximum value of Overdraft Tier/Band
     *
     * @return tierValueMax
     **/
    @Schema(description = "Maximum value of Overdraft Tier/Band")
    public String getTierValueMax() {
        return tierValueMax;
    }

    public void setTierValueMax(String tierValueMax) {
        this.tierValueMax = tierValueMax;
    }

    public OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand EAR(String EAR) {
        this.EAR = EAR;
        return this;
    }

    /**
     * EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently used interchangeably), being the actual annual interest rate of an Overdraft.
     *
     * @return EAR
     **/
    @Schema(description = "EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently used interchangeably), being the actual annual interest rate of an Overdraft.")
    public String getEAR() {
        return EAR;
    }

    public void setEAR(String EAR) {
        this.EAR = EAR;
    }

    public OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand agreementLengthMin(Integer agreementLengthMin) {
        this.agreementLengthMin = agreementLengthMin;
        return this;
    }

    /**
     * Specifies the minimum length of a band for a fixed overdraft agreement
     *
     * @return agreementLengthMin
     **/
    @Schema(description = "Specifies the minimum length of a band for a fixed overdraft agreement")
    public Integer getAgreementLengthMin() {
        return agreementLengthMin;
    }

    public void setAgreementLengthMin(Integer agreementLengthMin) {
        this.agreementLengthMin = agreementLengthMin;
    }

    public OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand agreementLengthMax(Integer agreementLengthMax) {
        this.agreementLengthMax = agreementLengthMax;
        return this;
    }

    /**
     * Specifies the maximum length of a band for a fixed overdraft agreement
     *
     * @return agreementLengthMax
     **/
    @Schema(description = "Specifies the maximum length of a band for a fixed overdraft agreement")
    public Integer getAgreementLengthMax() {
        return agreementLengthMax;
    }

    public void setAgreementLengthMax(Integer agreementLengthMax) {
        this.agreementLengthMax = agreementLengthMax;
    }

    public OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand agreementPeriod(AgreementPeriodEnum agreementPeriod) {
        this.agreementPeriod = agreementPeriod;
        return this;
    }

    /**
     * Specifies the period of a fixed length overdraft agreement
     *
     * @return agreementPeriod
     **/
    @Schema(description = "Specifies the period of a fixed length overdraft agreement")
    public AgreementPeriodEnum getAgreementPeriod() {
        return agreementPeriod;
    }

    public void setAgreementPeriod(AgreementPeriodEnum agreementPeriod) {
        this.agreementPeriod = agreementPeriod;
    }

    public OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand overdraftInterestChargingCoverage(OverdraftInterestChargingCoverageEnum overdraftInterestChargingCoverage) {
        this.overdraftInterestChargingCoverage = overdraftInterestChargingCoverage;
        return this;
    }

    /**
     * Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is �2k and the interest tiers are:- 0-�500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the �Whole� of the account balance,  and in the 2nd that it is �Tiered�.
     *
     * @return overdraftInterestChargingCoverage
     **/
    @Schema(description = "Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is �2k and the interest tiers are:- 0-�500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the �Whole� of the account balance,  and in the 2nd that it is �Tiered�.")
    public OverdraftInterestChargingCoverageEnum getOverdraftInterestChargingCoverage() {
        return overdraftInterestChargingCoverage;
    }

    public void setOverdraftInterestChargingCoverage(OverdraftInterestChargingCoverageEnum overdraftInterestChargingCoverage) {
        this.overdraftInterestChargingCoverage = overdraftInterestChargingCoverage;
    }

    public OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand bankGuaranteedIndicator(Boolean bankGuaranteedIndicator) {
        this.bankGuaranteedIndicator = bankGuaranteedIndicator;
        return this;
    }

    /**
     * Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.
     *
     * @return bankGuaranteedIndicator
     **/
    @Schema(description = "Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.")
    public Boolean isBankGuaranteedIndicator() {
        return bankGuaranteedIndicator;
    }

    public void setBankGuaranteedIndicator(Boolean bankGuaranteedIndicator) {
        this.bankGuaranteedIndicator = bankGuaranteedIndicator;
    }

    public OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand notes(List<String> notes) {
        this.notes = notes;
        return this;
    }

    public OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand addNotesItem(String notesItem) {
        if (this.notes == null) {
            this.notes = new ArrayList<String>();
        }
        this.notes.add(notesItem);
        return this;
    }

    /**
     * Get notes
     *
     * @return notes
     **/
    @Schema(description = "")
    public List<String> getNotes() {
        return notes;
    }

    public void setNotes(List<String> notes) {
        this.notes = notes;
    }

    public OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand overdraftFeesCharges(List<OBReadProduct2DataOtherProductTypeOverdraftOverdraftFeesCharges> overdraftFeesCharges) {
        this.overdraftFeesCharges = overdraftFeesCharges;
        return this;
    }

    public OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand addOverdraftFeesChargesItem(OBReadProduct2DataOtherProductTypeOverdraftOverdraftFeesCharges overdraftFeesChargesItem) {
        if (this.overdraftFeesCharges == null) {
            this.overdraftFeesCharges = new ArrayList<OBReadProduct2DataOtherProductTypeOverdraftOverdraftFeesCharges>();
        }
        this.overdraftFeesCharges.add(overdraftFeesChargesItem);
        return this;
    }

    /**
     * Get overdraftFeesCharges
     *
     * @return overdraftFeesCharges
     **/
    @Schema(description = "")
    public List<OBReadProduct2DataOtherProductTypeOverdraftOverdraftFeesCharges> getOverdraftFeesCharges() {
        return overdraftFeesCharges;
    }

    public void setOverdraftFeesCharges(List<OBReadProduct2DataOtherProductTypeOverdraftOverdraftFeesCharges> overdraftFeesCharges) {
        this.overdraftFeesCharges = overdraftFeesCharges;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand obReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand = (OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand) o;
        return Objects.equals(this.identification, obReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand.identification) &&
                Objects.equals(this.tierValueMin, obReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand.tierValueMin) &&
                Objects.equals(this.tierValueMax, obReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand.tierValueMax) &&
                Objects.equals(this.EAR, obReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand.EAR) &&
                Objects.equals(this.agreementLengthMin, obReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand.agreementLengthMin) &&
                Objects.equals(this.agreementLengthMax, obReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand.agreementLengthMax) &&
                Objects.equals(this.agreementPeriod, obReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand.agreementPeriod) &&
                Objects.equals(this.overdraftInterestChargingCoverage, obReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand.overdraftInterestChargingCoverage) &&
                Objects.equals(this.bankGuaranteedIndicator, obReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand.bankGuaranteedIndicator) &&
                Objects.equals(this.notes, obReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand.notes) &&
                Objects.equals(this.overdraftFeesCharges, obReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand.overdraftFeesCharges);
    }

    @Override
    public int hashCode() {
        return Objects.hash(identification, tierValueMin, tierValueMax, EAR, agreementLengthMin, agreementLengthMax, agreementPeriod, overdraftInterestChargingCoverage, bankGuaranteedIndicator, notes, overdraftFeesCharges);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OBReadProduct2DataOtherProductTypeOverdraftOverdraftTierBand {\n");

        sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
        sb.append("    tierValueMin: ").append(toIndentedString(tierValueMin)).append("\n");
        sb.append("    tierValueMax: ").append(toIndentedString(tierValueMax)).append("\n");
        sb.append("    EAR: ").append(toIndentedString(EAR)).append("\n");
        sb.append("    agreementLengthMin: ").append(toIndentedString(agreementLengthMin)).append("\n");
        sb.append("    agreementLengthMax: ").append(toIndentedString(agreementLengthMax)).append("\n");
        sb.append("    agreementPeriod: ").append(toIndentedString(agreementPeriod)).append("\n");
        sb.append("    overdraftInterestChargingCoverage: ").append(toIndentedString(overdraftInterestChargingCoverage)).append("\n");
        sb.append("    bankGuaranteedIndicator: ").append(toIndentedString(bankGuaranteedIndicator)).append("\n");
        sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
        sb.append("    overdraftFeesCharges: ").append(toIndentedString(overdraftFeesCharges)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    /**
     * Specifies the period of a fixed length overdraft agreement
     */
    @JsonAdapter(AgreementPeriodEnum.Adapter.class)
    public enum AgreementPeriodEnum {
        PACT("PACT"),
        PDAY("PDAY"),
        PHYR("PHYR"),
        PMTH("PMTH"),
        PQTR("PQTR"),
        PWEK("PWEK"),
        PYER("PYER");

        private String value;

        AgreementPeriodEnum(String value) {
            this.value = value;
        }

        public static AgreementPeriodEnum fromValue(String text) {
            for (AgreementPeriodEnum b : AgreementPeriodEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<AgreementPeriodEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final AgreementPeriodEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public AgreementPeriodEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return AgreementPeriodEnum.fromValue(String.valueOf(value));
            }
        }
    }

    /**
     * Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is �2k and the interest tiers are:- 0-�500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the �Whole� of the account balance,  and in the 2nd that it is �Tiered�.
     */
    @JsonAdapter(OverdraftInterestChargingCoverageEnum.Adapter.class)
    public enum OverdraftInterestChargingCoverageEnum {
        INBA("INBA"),
        INTI("INTI"),
        INWH("INWH");

        private String value;

        OverdraftInterestChargingCoverageEnum(String value) {
            this.value = value;
        }

        public static OverdraftInterestChargingCoverageEnum fromValue(String text) {
            for (OverdraftInterestChargingCoverageEnum b : OverdraftInterestChargingCoverageEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<OverdraftInterestChargingCoverageEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final OverdraftInterestChargingCoverageEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public OverdraftInterestChargingCoverageEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return OverdraftInterestChargingCoverageEnum.fromValue(String.valueOf(value));
            }
        }
    }

}
